---
import { app } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";
import { getFirestore } from "firebase-admin/firestore";
import Layout from "../layouts/Layout.astro";
import Alert from '../components/Alert.tsx';

interface Recipe {
  id: string;
  name: string;
  description: string;
  ingredients: string;
}

interface PersonalRecipe {
  email: string;
  name: string;
  description: string;
  ingredients: string;
}

interface Customer {
  email: string,
  name: string,
  personalRecipes: Array<string>,
}

// db for user
const db = getFirestore(app);

// auth section
const auth = getAuth(app);

/* Check current session */
if (!Astro.cookies.has("session")) {
  return Astro.redirect("/signin");
}

const sessionCookie = Astro.cookies.get("session")?.value;
const decodedCookie = sessionCookie && await auth.verifySessionCookie(sessionCookie);
const user = decodedCookie && await auth.getUser(decodedCookie.uid);

const userInfo = user && {
  email: user.email,
  displayName: user.displayName,
};

if (!user) {
  return Astro.redirect("/signin");
}

// db for ALL recipes
const recipesRef = db.collection("recipes");
const recipesSnapshot = await recipesRef.get();
const recipes = recipesSnapshot.docs.map((doc: any) => ({
  id: doc.id,
  ...doc.data(),
})) as Recipe[];

// db for Customer
const customersRef = db.collection("customers");

// get snapshopt of customer data that matches current user
const customersSnapshot = await customersRef.where('email', '==', user.email).get();
const customers = customersSnapshot.docs.map((doc: any) => ({
  id: doc.id,
  ...doc.data(),
})) as Customer[];

// db for Personal Recipes
const personalRecipesRef = db.collection("personalRecipes");

// get snapshopt of customer data that matches current user
const personalRecipesSnapshot = await personalRecipesRef.where('email', '==', user.email).get();
const personalRecipe = personalRecipesSnapshot.docs.map((doc: any) => ({
  id: doc.id,
  ...doc.data(),
})) as PersonalRecipe[];

const {
  name,
} = customers[0];

const displayPersonalRecipes = personalRecipe && personalRecipe.length > 0;

const existingRecipe = Astro.url.searchParams.get('recipeExists')! || '';
---
<main>
  <Layout title="dashboard">
    <h1>Welcome {name}</h1>
    <p>We are happy to see you here!</p>
    <p>Below are the recipes you have added and ones that you can edit/delete.</p>
    <p>Once you create them then they will be available for others to view on the main recipe page!!</p>
    {existingRecipe && (
      <Alert message="There is already a recipe by that name!" />
    )}
    <h2>Personal Recipe Collection</h2>
    {displayPersonalRecipes && (
      <>
        <p>Here they are!</p>
        {personalRecipe.map((recipe) => (
          <>
            <h5>{recipe.name}</h5>
            <p>{recipe.description}</p>
            <ul>
              <li>
                {recipe.ingredients}
              </li>
            </ul>
          </>
        ))}
      </>
    )}
    {!displayPersonalRecipes && (
      <>
        <p>You have not added any yet!</p>
      </>
    )}
    <p>
      <a href="/add/recipe/">Add new recipe</a>
    </p>
  </Layout>
</main>
